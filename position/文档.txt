那个job_predict.txt要收到前端输入的技能加点以及它的熟练度。格式：
C.........npm	ES6	lnmp
2................0	0	0
在获取到这些内容后，就会更新转变为只有这些属性的内容。
如
C	Spring	hadoop
2	3	4
也可以直接传，就不需要更新了。看哪个方便。

因为属性多的时候都用作筛选条件就会出现没有数据的情况。所以选择输入属性并统计在数据集中出现最多的其中三个。（前提是输入的属性超过三个），如果只有两个就只选择两个。另外，输入的属性最少要求要两个。
输出的结果就是：如果有结果就直接打印结果，也就是1个。如果没有，就从选择的属性中的按照属性筛选出来的结果，也就是job_test.txt中的结果集中，统计岗位名称，选择前五个打印。
（可能还会出现['前端开发工程师', 'java开发工程师', 'PHP开发工程师', '软件工程师', 'C#开发工程师']）（属性为 C HTML 前端）这种情况。因为选择前五个，前端占了将近一半。但是还有C在，所以就会有后端的岗位在。而且，筛选出来的饿时候属性不只有这三个，也可能会有其他，只是同时包含了这三个而已。

trees.py 有改变。直接复制一下就可以了

job_tree.txt 用来保存预测数据，差不多就是转换格式而已

那个.sql文件是数据集，我从数据库中直接操作会很方便，如果是在csv文件中我觉得可能没有我操作mysql数据库方便一点。

